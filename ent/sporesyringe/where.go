// Code generated by ent, DO NOT EDIT.

package sporesyringe

import (
	"example/myco-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldLTE(FieldID, id))
}

// RecievedDate applies equality check predicate on the "RecievedDate" field. It's identical to RecievedDateEQ.
func RecievedDate(v time.Time) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldEQ(FieldRecievedDate, v))
}

// Species applies equality check predicate on the "Species" field. It's identical to SpeciesEQ.
func Species(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldEQ(FieldSpecies, v))
}

// Supplier applies equality check predicate on the "Supplier" field. It's identical to SupplierEQ.
func Supplier(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldEQ(FieldSupplier, v))
}

// RecievedDateEQ applies the EQ predicate on the "RecievedDate" field.
func RecievedDateEQ(v time.Time) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldEQ(FieldRecievedDate, v))
}

// RecievedDateNEQ applies the NEQ predicate on the "RecievedDate" field.
func RecievedDateNEQ(v time.Time) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldNEQ(FieldRecievedDate, v))
}

// RecievedDateIn applies the In predicate on the "RecievedDate" field.
func RecievedDateIn(vs ...time.Time) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldIn(FieldRecievedDate, vs...))
}

// RecievedDateNotIn applies the NotIn predicate on the "RecievedDate" field.
func RecievedDateNotIn(vs ...time.Time) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldNotIn(FieldRecievedDate, vs...))
}

// RecievedDateGT applies the GT predicate on the "RecievedDate" field.
func RecievedDateGT(v time.Time) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldGT(FieldRecievedDate, v))
}

// RecievedDateGTE applies the GTE predicate on the "RecievedDate" field.
func RecievedDateGTE(v time.Time) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldGTE(FieldRecievedDate, v))
}

// RecievedDateLT applies the LT predicate on the "RecievedDate" field.
func RecievedDateLT(v time.Time) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldLT(FieldRecievedDate, v))
}

// RecievedDateLTE applies the LTE predicate on the "RecievedDate" field.
func RecievedDateLTE(v time.Time) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldLTE(FieldRecievedDate, v))
}

// SpeciesEQ applies the EQ predicate on the "Species" field.
func SpeciesEQ(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldEQ(FieldSpecies, v))
}

// SpeciesNEQ applies the NEQ predicate on the "Species" field.
func SpeciesNEQ(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldNEQ(FieldSpecies, v))
}

// SpeciesIn applies the In predicate on the "Species" field.
func SpeciesIn(vs ...string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldIn(FieldSpecies, vs...))
}

// SpeciesNotIn applies the NotIn predicate on the "Species" field.
func SpeciesNotIn(vs ...string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldNotIn(FieldSpecies, vs...))
}

// SpeciesGT applies the GT predicate on the "Species" field.
func SpeciesGT(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldGT(FieldSpecies, v))
}

// SpeciesGTE applies the GTE predicate on the "Species" field.
func SpeciesGTE(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldGTE(FieldSpecies, v))
}

// SpeciesLT applies the LT predicate on the "Species" field.
func SpeciesLT(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldLT(FieldSpecies, v))
}

// SpeciesLTE applies the LTE predicate on the "Species" field.
func SpeciesLTE(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldLTE(FieldSpecies, v))
}

// SpeciesContains applies the Contains predicate on the "Species" field.
func SpeciesContains(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldContains(FieldSpecies, v))
}

// SpeciesHasPrefix applies the HasPrefix predicate on the "Species" field.
func SpeciesHasPrefix(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldHasPrefix(FieldSpecies, v))
}

// SpeciesHasSuffix applies the HasSuffix predicate on the "Species" field.
func SpeciesHasSuffix(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldHasSuffix(FieldSpecies, v))
}

// SpeciesEqualFold applies the EqualFold predicate on the "Species" field.
func SpeciesEqualFold(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldEqualFold(FieldSpecies, v))
}

// SpeciesContainsFold applies the ContainsFold predicate on the "Species" field.
func SpeciesContainsFold(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldContainsFold(FieldSpecies, v))
}

// SupplierEQ applies the EQ predicate on the "Supplier" field.
func SupplierEQ(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldEQ(FieldSupplier, v))
}

// SupplierNEQ applies the NEQ predicate on the "Supplier" field.
func SupplierNEQ(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldNEQ(FieldSupplier, v))
}

// SupplierIn applies the In predicate on the "Supplier" field.
func SupplierIn(vs ...string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldIn(FieldSupplier, vs...))
}

// SupplierNotIn applies the NotIn predicate on the "Supplier" field.
func SupplierNotIn(vs ...string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldNotIn(FieldSupplier, vs...))
}

// SupplierGT applies the GT predicate on the "Supplier" field.
func SupplierGT(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldGT(FieldSupplier, v))
}

// SupplierGTE applies the GTE predicate on the "Supplier" field.
func SupplierGTE(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldGTE(FieldSupplier, v))
}

// SupplierLT applies the LT predicate on the "Supplier" field.
func SupplierLT(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldLT(FieldSupplier, v))
}

// SupplierLTE applies the LTE predicate on the "Supplier" field.
func SupplierLTE(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldLTE(FieldSupplier, v))
}

// SupplierContains applies the Contains predicate on the "Supplier" field.
func SupplierContains(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldContains(FieldSupplier, v))
}

// SupplierHasPrefix applies the HasPrefix predicate on the "Supplier" field.
func SupplierHasPrefix(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldHasPrefix(FieldSupplier, v))
}

// SupplierHasSuffix applies the HasSuffix predicate on the "Supplier" field.
func SupplierHasSuffix(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldHasSuffix(FieldSupplier, v))
}

// SupplierEqualFold applies the EqualFold predicate on the "Supplier" field.
func SupplierEqualFold(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldEqualFold(FieldSupplier, v))
}

// SupplierContainsFold applies the ContainsFold predicate on the "Supplier" field.
func SupplierContainsFold(v string) predicate.SporeSyringe {
	return predicate.SporeSyringe(sql.FieldContainsFold(FieldSupplier, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SporeSyringe) predicate.SporeSyringe {
	return predicate.SporeSyringe(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SporeSyringe) predicate.SporeSyringe {
	return predicate.SporeSyringe(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SporeSyringe) predicate.SporeSyringe {
	return predicate.SporeSyringe(func(s *sql.Selector) {
		p(s.Not())
	})
}
